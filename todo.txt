------------------
  environment.py
------------------
 * Check to make sure that components / spacecraft have valid values before
   running Spacecraft.initializeComponents()

 * Handle component damage and enabling / disabling of components.


---------------
  location.py
---------------
 * Work on new generation algorithms for Sector/System/Tactical.

 * Location.distance() and Location.radius()
   * Tested, comment, etc.

 * Map.accessCoords()
   * Delete location objects later on if they're empty to save space.

 * Map.list()
   * Rewrite so it's more useful than just printing a string for debugging
     purposes.

 * Map.__str__()
   * Fix the naming and string system.

 * Tactical
   * Add a name that adjusts based on whether it's a planet or asteroid field
     or some other significant object where this is taking place.
   * Vary size based on traits of the planet or asteroid field?
   * Add generator.

 * System.__init__()
   * Add other layouts, including binary and tertiary stars.
   * Populate the generator.
   * Integrate with Tactical()


-----------
  game.py
-----------
 * Think of a way to hide certain API data files from certain players.

 * Add buy/sell methods for structures/spacecraft/components/units/etc. Do it
   through those objects rather than through Player().
   * Make sure you handle cases where there's not enough cash.

 * Finish the turn loop so that it is functional.

 * Fleet
   * Add management mechanisms, and ability to use as part of an alliance.
   * Deputy can move/fight. Commander can move/fight/administer fleet.
   * Anyone with ships in it can join/leave fleet. Commander can kick ships and
     players from the fleet.


---------
  Other
---------
 * Add a mission / campaign system for the newbie starting galaxy, and perhaps
   for the later one too.

 * Integrate Player with openID. How will authentication be handled?

 * Implement the combat system and movement system for fleets/spacecraft/etc.

 * Implement economy, money, resources, tribute, bounties, etc.
   * Add wages for units and upkeep for spacecraft/structures?

 * Use gettext for internationalization.

 * Add some method by which the clients can handle the exceptions where the
   user should see it.

 * Use an error log for the other exceptions.

 * Prepare for these client UIs:
   * web (desktop, mobile), python (CLI, IRC, GUI)

 * Update website.
