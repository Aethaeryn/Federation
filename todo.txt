---------------
  location.py
---------------
 * Work on new generation algorithms for Sector/System/Tactical.

 * Location.distance() and Location.radius()
   * Tested, comment, etc.

 * Map.accessCoords()
   * Delete location objects later on if they're empty to save space.

 * Map.list()
   * Rewrite so it's more useful than just printing a string for debugging
     purposes.

 * Map.__str__()
   * Fix the naming and string system.

 * Tactical
   * Add a name that adjusts based on whether it's a planet or asteroid field
     or some other significant object where this is taking place.
   * Vary size based on traits of the planet or asteroid field?
   * Add generator.

 * System.__init__()
   * Add other layouts, including binary and tertiary stars.
   * Integrate with Tactical()


-----------
  game.py
-----------
 * Finish the turn loop so that it is functional.


---------
  Other
---------
 * Check to make sure that YAML config files have valid values before parsing.

 * Implement the combat system and movement system for fleets/spacecraft/etc.

 * Implement fleet system, which is linked closely to combat / movement.
   * Ships move as part of a fleet.
   * Alliances can have fleets, or individual players can.
   * The deputy can move or fight. The commander can move/fight/administer.
   * Anyone in the group (alliance or player) can join/leave the fleet.
   * The commander can kick ships and players from the fleet.
   * There should also be locked fleets that are only allowed to certain
     players, even though the alliance has more people.

 * Add a mission / campaign system for the newbie starting galaxy, and perhaps
   for the later one too.

 * Integrate Player with openID. How will authentication be handled?

 * Think of a way to hide certain API data files from certain players.
   * Redo the API.

 * Implement economy:
   * Income and money.
   * Resources and mining.
   * Tributes, trade, and bounty.
   * Wages for units and upkeep for other stuff?
   * Buy/sell structures, spacecraft, components, units, etc.

 * Use gettext for internationalization.

 * Add some method by which the clients can handle the exceptions where the
   user should see it.
   * Use an error log for the other exceptions.

 * Federation/client is now strictly going to be for the web browser client. All other clients (IRC, Python, Android, iOS, etc.) will go into their own git repo because they are independent applications and it is highly unlikely that more than a few people will be interested in every single possible client.


